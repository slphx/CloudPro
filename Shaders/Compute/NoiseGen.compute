#pragma kernel NoiseGenMain

#define THREAD_GROUP_SIZE 8

#include "Noiselib/NoiseLib.hlsl"

// enum NoiseType {0:Hash, 1:Perlin};
int _NoiseType;
int _Resolution;
float _InvResolution;
int _Seed;
float _Frequency;
bool _IsTiling;
int _Octaves;
bool _Inverse;

RWTexture3D<float4> _Noise;

float getNoise(float3 pos, float frequency) {
    float noise = 0.0;
    // Perlin Noise 2D
    if (_NoiseType == 1) {
        noise = Perlin2D(pos.xy, frequency, _IsTiling);
    }
    // Perlin Noise 3D
    else if (_NoiseType == 2) {
        noise = Perlin3D(pos.xyz, frequency, _IsTiling);
    }
    // Worley Noise 2D
    else if (_NoiseType == 3) {
        noise = Worley2D(pos.xy, frequency, _IsTiling);
    }
    // Worley Noise 3D
    else if (_NoiseType == 4) {
        noise = Worley3D(pos.xyz, frequency, _IsTiling);
    }

    return noise;
}

float dilatePerlinWorley(float p, float w, float x){
	float curve = 0.75;
	if(x < 0.5){
		x /= 0.5;
		float n = p + w * x;
		return n * lerp(1, 0.5, pow(x,curve));
	}
	else{
		x = (x-0.5)/0.5;
		float n = w + p *(1.0 - x);
		return n * lerp(0.5, 1.0, pow(x, 1.0/curve));
	}
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, THREAD_GROUP_SIZE)]
void NoiseGenMain(uint3 id: SV_DispatchThreadID) {
    float3 pos = float3(id.x, id.y, id.z) * _InvResolution;

    const float G = 0.5,    // 振幅变化倍率
                FG = 2.0;   // 频率变化倍率

    float   value = 0.0;

    pos += _Seed * hash13(_Seed);

    // Hash Noise
    if (_NoiseType == 0) {
        value += 0.5 + 0.5 * hash31(id.xyz + 
                            _Seed * float3(hash11(id.x + _Seed), hash11(id.y + _Seed), hash11(id.z + _Seed)));
    } else if (_NoiseType <= 4){
        float   frequency = _Frequency,
                amplitude = 1.0,
                sumAmplitude = 0.0;

        for (int i=0; i<_Octaves; i++) {
            sumAmplitude += amplitude;
            value += amplitude * getNoise(pos, frequency);
            amplitude *= G;
            frequency *= FG;
        }
        value /= sumAmplitude;
        if (_Inverse) value = 1.0 - value;
    } else if (_NoiseType == 5) {
        float   frequency = _Frequency/2.0,
                amplitude = 1.0,
                sumAmplitude = 0.0;

        float perlinFBM = 0.0;
        for (int i=0; i<_Octaves*2; i++) {
            sumAmplitude += amplitude;
            perlinFBM += amplitude * Perlin3D(pos, frequency, _IsTiling);
            amplitude *= G;
            frequency *= FG;
        }
        perlinFBM /= sumAmplitude;

        frequency = _Frequency,
        amplitude = 1.0,
        sumAmplitude = 0.0;

        float worleyFBM = 0.0;
        for (int j=0; j<_Octaves; j++) {
            sumAmplitude += amplitude;
            worleyFBM += amplitude * Worley3D(pos, frequency, _IsTiling);
            amplitude *= G;
            frequency *= FG;
        }
        worleyFBM /= sumAmplitude;
        worleyFBM = 1.0 - worleyFBM;

        // perlinFBM = perlinFBM * 2.0 - 1.0;
        // worleyFBM = worleyFBM * 2.0 - 1.0;

        float   OldMin = worleyFBM,
                OldMax = 1.0,
                NewMin = 0.0,
                NewMax = 1.0;
        float PerlinWorley = clamp(NewMin + (((perlinFBM - OldMin)/(OldMax - OldMin))*(NewMax - NewMin)), 0.0, 1.0);
        
        
        value = worleyFBM * perlinFBM * 2.0;
        // value = PerlinWorley;
        // value = value * 0.5 + 0.5;
    }

    _Noise[id.xyz] = value;
}